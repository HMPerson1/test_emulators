# sudo: false --> run dist image in docker container on shared host for faster startup (runs slower)
# sudo: required --> run dist image in VM on Google Compute Engine for slower startup (runs faster)
# sudo and dist are ignored on osx
sudo: required
dist: trusty
env:
  - SYS=28 ABI="google_apis;x86_64"

language: generic
before_install:
  - export DISPLAY=:99.0
  - sh -e /etc/init.d/xvfb start
  - sleep 3 # give xvfb some time to start

  # Install android tools
  - ANDROID_TOOLS=4333796 # android-28
  - export ANDROID_HOME=~/android-sdk
  - wget -q "https://dl.google.com/android/repository/sdk-tools-linux-$ANDROID_TOOLS.zip" -O android-sdk-tools.zip
  - unzip -q android-sdk-tools.zip -d ${ANDROID_HOME}
  - rm android-sdk-tools.zip
  - PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools
  # Silence warning.
  - mkdir -p ~/.android
  - touch ~/.android/repositories.cfg
  # Accept licenses before installing components, no need to echo y for each component
  - yes | sdkmanager --licenses
  # Platform tools
  - sdkmanager "emulator" "tools" "platform-tools" > /dev/null
  - sdkmanager --list | head -15
  # install older build tools (for emulator)
  - sdkmanager "build-tools;25.0.2" "platforms;android-25" > /dev/null
  # Create and start emulator.
  - sdkmanager "system-images;android-$SYS;$ABI" > /dev/null
  - sdkmanager --list | head -15
  - rm -rf $ANDROID_HOME/emulator
  # Install latest canary of emulator
  - sudo apt-get install -y libunwind8 libc++1
  - wget -q "https://dl.google.com/android/repository/emulator-linux-5346014.zip" -O emulator.zip
  - unzip -q emulator.zip -d ${ANDROID_HOME}
  - rm emulator.zip
  - echo no | avdmanager create avd -n test -k "system-images;android-$SYS;$ABI"
  # emulator debug options
  - EMU_PARAMS="-no-boot-anim -gpu off"
  - EMU_COMMAND="emulator-headless -no-accel"
    # use the absolute emulator path in case older version installed (on default path)
  - $ANDROID_HOME/emulator/$EMU_COMMAND -avd test -no-audio $EMU_PARAMS $EMU_ADDITIONAL_OPTIONS ${EMU_DEBUG} &
before_script:
  # Wait for emulator to startup.
  - ./scripts/android-wait-for-emulator.sh
  - adb shell input keyevent 82

script:
  - echo "Done."
